#!/usr/bin/env node
'use strict';
var async = require('async');
var version = require('./package.json').version;
function getUserHome() {
    return process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
}
var args = {
    host: '127.0.0.1',
    port: 9226,
    path: getUserHome() + '/kval-db',
    workers: 2,
    maxDbSizeBytes: 250 * 1024 * 1024 * 1024,
    workerMemory: '320M'
};
var pm2 = require('pm2');

var availableActions = ['start', 'stop', 'help', 'version'];
var action = process.argv[2];
if (!~availableActions.indexOf(action)) {
    console.error('First argument is invalid. Choose from:', availableActions.join(','));
    console.error(process.argv);
    return;
}

if (action === 'help') {
    console.log('\nUsage:')
    console.log('\n  $  kval [', availableActions.join(','), '] --[option]');
    console.log('\nOptions (defaults shown)');
    Object.keys(args).forEach(function (name) {
        console.log(' ', '--' + name + '=' + args[name]);
    });
    return;
}
if (action === 'version') {
    console.log(version);
    return;
}

// Parse args
var argv = process.argv;
var arg;
var spl;
var key;
var val;
for (var i = 2; i < argv.length; i++) {
    arg = argv[i];
    arg = arg.replace('--', '');
    spl = arg.split('=');
    key = spl[0];
    val = spl[1];
    args[key] = val;
}

function onDone(err, apps) {
    if (err) {
        console.error(err.message, err.stack);
        throw err;
    }
    console.log('success.');
    pm2.disconnect();
}

pm2.connect(function () {
    switch (action) {
        case 'start':
            console.log('db args', args);
            console.log('starting...');
            async.series([
                function (cb) {
                    pm2.start({
                        name: 'kval',
                        script: 'worker.js',
                        exec_mode: 'cluster',
                        instances: args.workers,
                        env: {
                            KVAL_WORKER_HOST: args.host,
                            KVAL_WORKER_POST: args.port,
                            KVAL_WORKER_PATH: args.path,
                            KVAL_WORKER_MAPSIZE: args.maxDbSizeBytes
                        },
                        max_memory_restart: args.workerMemory
                    }, cb);
                },
                function (cb) {
                    pm2.startup(process.platform, { user: process.getuid() }, cb);
                },
                pm2.dump
            ], onDone);
        break;
        case 'stop':
            console.log('stopping...');
            async.series([
                function (cb) {
                    pm2.stop('kval', cb);
                },
                pm2.dump
            ], onDone);
        break;
    }
});
